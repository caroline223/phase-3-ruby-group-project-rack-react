elsif @req.path.match(/books/) && @req.get? && params_id
      author = Author.find_by_id(params_id)
      author_and_books = {
        name: author.full_name,
        books: author.books 
      }
      return [200, { 'Content-Type' => 'application/json' }, [ author_and_books.to_json ]] 



      //BooksInfo.js 

      getBooks(){
        fetch(`http://localhost:9292/books/`)
       .then((result) => {
           result.json().then((resp) => {
               console.warn(resp)
           })
       })
    }

     elsif @req.path.match(/arequests/) && @req.get?
      author = AuthorRequest.all
      return [200, { 'Content-Type' => 'application/json' }, [ author.to_json ]]
  
      
    elsif @req.path.match(/arequests/) && @req.post?
        data = JSON.parse  @req.body.read 
        author_request =  AuthorRequest.create(data)
        return [200, { 'Content-Type' => 'application/json' }, [author_request.to_json ]]


      elsif @req.path.match(/brequests/) && @req.get?
        book = BookRequest.all
        return [200, { 'Content-Type' => 'application/json' }, [ book.to_json ]]
    
        
    elsif @req.path.match(/brequests/) && @req.post?
        data = JSON.parse  @req.body.read 
        book_request =  BookRequest.create(data)
        return [200, { 'Content-Type' => 'application/json' }, [book_request.to_json ]]


        AuthorBooks.rb
        import React from 'react'

class AuthorBooks extends React.Component {

    state = {
        author: {}
    }

    componentDidMount(){
        fetch(`http://localhost:9292/books/${this.props.match.params.id}`)
        .then(response => response.json())
        .then((author) => {
            this.setState({ author })
        })
    }



    render() {
       
        return (
          <h1>{this.state.author.name}</h1>
               
        )
    }
}

export default AuthorBooks;